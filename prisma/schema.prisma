generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id               String          @id @default(cuid()) @map("_id")
  name             String
  frontendStoreUrl String
  userId           String
  billboards       Billboard[]
  categories       Category[]
  sizes            Size[]
  colors           Color[]
  products         Product[]
  orders           Order[]
  infos            Info[]
  payPalPayments   PayPalPayment[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Billboard {
  id         String     @id @default(cuid()) @map("_id")
  storeId    String
  label      String
  imageUrl   String
  isMain     Boolean    @default(false)
  categories Category[]
  createdAt  DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  Store      Store      @relation(fields: [storeId], references: [id])
}

model Category {
  id          String    @id @default(cuid()) @map("_id")
  storeId     String
  billboardId String
  name        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Store       Store     @relation(fields: [storeId], references: [id])
  Billboard   Billboard @relation(fields: [billboardId], references: [id])
}

model Size {
  id        String    @id @default(cuid()) @map("_id")
  storeId   String
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
}

model Color {
  id        String    @id @default(cuid()) @map("_id")
  storeId   String
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
}

model Product {
  id         String      @id @default(cuid()) @map("_id")
  storeId    String
  categoryId String
  name       String
  price      Int
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  colorId    String
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Store      Store       @relation(fields: [storeId], references: [id])
  Category   Category    @relation(fields: [categoryId], references: [id])
  Size       Size        @relation(fields: [sizeId], references: [id])
  Color      Color       @relation(fields: [colorId], references: [id])
}

model Image {
  id        String   @id @default(cuid()) @map("_id")
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(cuid()) @map("_id")
  storeId    String
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  totalPrice String?
  Store      Store       @relation(fields: [storeId], references: [id])
}

model OrderItem {
  id        String  @id @default(cuid()) @map("_id")
  orderId   String
  productId String
  Product   Product @relation(fields: [productId], references: [id])
  Order     Order   @relation(fields: [orderId], references: [id])
}

model Info {
  id          String   @id @default(cuid()) @map("_id")
  storeId     String
  name        String
  billboardId String
  icon        String
  phonenumber String
  whatsapp    String
  instagram   String
  facebook    String
  email       String
  visa        Boolean  @default(false)
  mastercard  Boolean  @default(false)
  amex        Boolean  @default(false)
  hipercard   Boolean  @default(false)
  elo         Boolean  @default(false)
  pix         Boolean  @default(false)
  paypal      Boolean  @default(false)
  stripe      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Store       Store    @relation(fields: [storeId], references: [id])
}

model PayPalPayment {
  id                     String   @id @default(cuid()) @map("_id")
  storeId                String
  orderID                String
  payerID                String
  paymentID              String?
  billingToken           String?
  facilitatorAccessToken String?
  paymentSource          String?
  totalPrice             String   @default("0")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  Store                  Store    @relation(fields: [storeId], references: [id])
}
